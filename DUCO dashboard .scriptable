{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "red",
    "glyph" : "address-card"
  },
  "name" : "DUCO dashboard ",
  "script" : "const USERNAME = 'Your username'; \/\/ <-- Your username here\n\nconst EXCHANGE_PAIR_PRICE = 'price'; \/\/ for real(normal) price use 'price'. for other coin price use 'price COIN_NAME' e.g. 'price XRP'. for exchange price use 'EXCHANGER price' e.g. 'Node-S price'.   p.s. case sensitive\n\nconst refreshRate = 10; \/\/ time in second\n\n\/\/ p.s. it will update but i don't know when\n \n    \nasync function getUserJson(username) {  \n  const loadedJson = await new Request('https:\/\/server.duinocoin.com\/users\/' + username).loadJSON();\n \n  if (loadedJson.result !== undefined) {\n    if (loadedJson['result']['transactions'].length != 0) {\n      let result = {\n      'username': loadedJson['result']['balance']['username'],\n      'balance': loadedJson['result']['balance']['balance'],\n      'miners': loadedJson['result']['miners'].length,\n      'lasttransactionamount': loadedJson['result']['transactions'][loadedJson['result']['transactions'].length - 1]['amount'], \n      'lasttransactionrecipient': loadedJson['result']['transactions'][loadedJson['result']['transactions'].length - 1]['recipient'],  \n      'lasttransactionsender': loadedJson['result']['transactions'][loadedJson['result']['transactions'].length - 1]['sender']\n      };\n      return result;\n    }else{\n      let result = {\n      'username': loadedJson['result']['balance']['username'],\n      'balance': loadedJson['result']['balance']['balance'],\n      'miners': loadedJson['result']['miners'].length,\n      'lasttransactionamount': 'none', \n      'lasttransactionrecipient': 'none',  \n      'lasttransactionsender': 'none'\n      };\n      return result;\n    }\n  }else{  \n    return null;\n  }\n}\n\nasync function getServerJson(exchange) {\n  const loadedJson = await new Request('https:\/\/server.duinocoin.com\/api.json').loadJSON();\n  \n  if (loadedJson.result === undefined) {\n    let result = {\n      'price': loadedJson['Duco ' + exchange]\n    };\n    return result;\n  }else{\n    console.log('WTF');\n    return null;\n  }\n}\n\nasync function createWidget(USERNAME, EXCHANGE_PAIR_PRICE, refreshRate) {      \n  let dashbroadJson = await getUserJson(USERNAME);\n  let dashbroadJson2 = await getServerJson(EXCHANGE_PAIR_PRICE);\n  let nextupdate = Date.now() + 1000 * refreshRate;\n  \n  let colorBackground = Color.black();  \/\/ <-- change color here\n  let colorFont = Color.white();  \/\/ <-------'\n  \n  const dashbroadWidget = new ListWidget();      \n  dashbroadWidget.backgroundColor = colorBackground;\n  dashbroadWidget.refreshAfterDate = new Date(nextupdate); \/\/ from https:\/\/talk.automators.fm\/t\/refresh-interval-widget\/9011\/3\n  \n  const stack = dashbroadWidget.addStack();\n  stack.size = new Size(340, 0);\n  stack.addSpacer(4);\n  stack.layoutVertically();\n  \n  if(dashbroadJson == null || dashbroadJson2 == null) {\n    const error = stack.addText('There was a(an) ERROR with the API or the code try again later');\n    error.font = new Font('Menlo', 13);\n    error.textColor = Color.red();\n    \n    return dashbroadWidget;\n  }\n  const name = stack.addText('  🤑 | Username: ' + dashbroadJson['username']);\n  name.font = new Font('Menlo', 17);\n  name.textColor = colorFont;\n  \n  const bal = stack.addText('  👛 | Balance: ~' + dashbroadJson['balance'].toFixed(3) + ' DUCO(s)');\n  bal.font = new Font('Menlo', 14);\n  bal.textColor = colorFont;\n    \n  const bal2 = stack.addText('      ~±' + (dashbroadJson['balance'] * dashbroadJson2['price']).toFixed(3) +  ' USD Rate: 1 DUCO\/' + dashbroadJson2['price'] + ' USD');\n  bal2.font = new Font('Menlo', 13);\n  bal2.textColor = colorFont;\n  \n  const miner = stack.addText('  ⛏ | Miner(s): ' + dashbroadJson['miners']);\n  miner.font = new Font('Menlo', 14);\n  miner.textColor = colorFont;\n  \n  const transaction1 = stack.addText('  💸 | Last transaction:');\n  transaction1.font = new Font('Menlo', 14);\n  transaction1.textColor = colorFont;\n  \n  const transaction2 = stack.addText('      Amount: ' + dashbroadJson['lasttransactionamount'] +  ' DUCO(s)');\n  transaction2.font = new Font('Menlo', 13);\n  transaction2.textColor = colorFont;\n  \n  const transaction3 = stack.addText('      From: ' + dashbroadJson['lasttransactionsender']);\n  transaction3.font = new Font('Menlo', 13);\n  transaction3.textColor = colorFont;\n  \n  const transaction4 = stack.addText('      To: ' + dashbroadJson['lasttransactionrecipient']);\n  transaction4.font = new Font('Menlo', 13);\n  transaction4.textColor = colorFont;\n  \n  \/\/ dashbroadWidget.presentMedium();\n  \n  return dashbroadWidget;\n}\n\nScript.setWidget(await createWidget(USERNAME, EXCHANGE_PAIR_PRICE, refreshRate));\nScript.complete();\n\n",
  "share_sheet_inputs" : [

  ]
}